# This module implements the cross-entropy training method.
# 
# The cross-entropy method is:
#   model-free - doesn't build a model of the environment
#   policy-based - approximates the policy of the agent
#   on-policy - requires frech data obtained from the environment
#
# The goal of the NN is to output a probability of actions based
# on the state of the environment.  
#
# The NN is trained by running batches of episodes through the NN
# where an action is randomly selected based on the probabilities
# generated by it.  Episodes with the best results are then used
# to train the NN, which should yield progressively better results
# with further training batches.

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
from collections import namedtuple
from tensorboardX import SummaryWriter
import gym

HIDDEN_SIZE = 128 # Use 128 hidden neurons
BATCH_SIZE = 16   # Run 16 samples per training batch
PERCENTILE = 70   # Keep the top 70% of episodes as good

class Net(nn.Module):
    def __init__(self, obs_size, hidden_size, n_actions):
        super(Net, self).__init__()
        self.net = nn.Sequential(
            nn.Linear(obs_size, hidden_size),
            nn.ReLU(),
            nn.Linear(hidden_size, n_actions)
        )

    def forward(self, x):
        return self.net(x)

Episode = namedtuple('Episode', field_names=['reward', 'steps'])
EpisodeStep = namedtuple('EpisodeStep', field_names=['observation', 'action'])

def iterate_batches(env, net, batch_size):
    batch = []
    episode_reward = 0.0
    episode_steps = []
    obs = env.reset()
    sm = nn.Softmax(dim=1)
    render = True

    while True:
        # Convert the observation array into a tensor
        obs_v = torch.FloatTensor([obs])

        # Run the observations through the NN, yielding a vector of action probabilities
        # SoftMax is run on the output because it isn't part of the neural network.
        # This is done because the CrossEntropy Loss function requires raw output
        # values to work.
        act_probs_v = sm(net(obs_v))
        act_probs = act_probs_v.data.numpy()[0]

        # Randomly select an action based on the generated probabilities
        action = np.random.choice(len(act_probs), p=act_probs)

        # Render the current environment so we can see it
        if render:
            env.render()

        # Run the action through the environment to get the next observation and 
        # collect any reward
        next_obs, reward, is_done, _ = env.step(action)
        
        # Accumulate reward
        episode_reward += reward
        episode_steps.append(EpisodeStep(observation=obs, action=action))

        if is_done:
            batch.append(Episode(reward=episode_reward, steps=episode_steps))
            episode_reward = 0.0
            episode_steps = []
            next_obs = env.reset()
            render = False
            if (len(batch)) == batch_size:
                    yield batch
                    batch = []
                    render = True

        obs = next_obs

# Filter the batch of samples to only those above the specified percentile
def filter_batch(batch, percentile):
    rewards = list(map(lambda s: s.reward, batch))
    reward_bound = np.percentile(rewards, percentile)
    reward_mean = float(np.mean(rewards))

    train_obs = []
    train_act = []
    for example in batch:
        if example.reward < reward_bound:
            continue
        train_obs.extend(map(lambda step: step.observation, example.steps))
        train_act.extend(map(lambda step: step.action, example.steps))
        
    train_obs_v = torch.FloatTensor(train_obs)
    train_act_v = torch.LongTensor(train_act)
    return train_obs_v, train_act_v, reward_bound, reward_mean

if __name__ == "__main__":
    env = gym.make("CartPole-v0")
    obs_size = env.observation_space.shape[0]
    n_actions = env.action_space.n
    net = Net(obs_size, HIDDEN_SIZE, n_actions)
    objective = nn.CrossEntropyLoss()
    optimizer = optim.Adam(params=net.parameters(), lr=0.01)
    writer = SummaryWriter()

    # Run batches using the iterate_batches function
    for iter_no, batch in enumerate(iterate_batches(env, net, BATCH_SIZE)):
        # After the batch select the best episodes
        obs_v, acts_v, reward_b, reward_m = filter_batch(batch, PERCENTILE)

        # Zero out the gradiants in the NN
        optimizer.zero_grad()

        # Run the observations through the NN to generate action scores
        action_scores_v = net(obs_v)

        # Pass action scores to the loss function to encourage our
        # NN to carry out those actions that led to good rewards
        loss_v = objective(action_scores_v, acts_v)

        # Calculate gradiants on the loss
        loss_v.backward()

        # Adjust the network
        optimizer.step()

        writer.add_scalar("loss", loss_v.item(), iter_no)
        writer.add_scalar("reward_bound", reward_b, iter_no)
        writer.add_scalar("reward_mean", reward_m, iter_no)
        print("%d: loss=%.3f reward_mean=%.1f, reward_bound=%.1f" % (iter_no, loss_v.item(), reward_m, reward_b))

        if reward_m > 199:
            print("Solved!")
            break
